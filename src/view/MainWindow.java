/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/ /Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.io.File;
import java.util.List;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.Constants;
import model.circuit.Circuit;
import model.circuit.CircuitEuc;
import model.circuit.CircuitGeo;
import model.coord.CoordEuc;
import model.coord.CoordGeo;
import view.waypoint.Waypoint;
import view.waypoint.WaypointEuc;
import view.waypoint.WaypointGeo;

/**
 * Le point de lancement de l'application (IHM).
 * Centralise la logique de l'app.
 * 
 * @author ugola
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        Waypoint.loadImage();
        initComponents();
        tableModel = new DefaultTableModel() {
        @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        distanceTable.setModel(tableModel);
        distanceTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        mapEuc.addWaypointSelectionListener(waypoint -> {
            switch (actionMode) {
                case SELECT:
                    CoordEuc coord = (CoordEuc) waypoint.getCoord();
                    idValueField.setText(String.valueOf(coord.getId()));
                    firstCompField.setText(String.format("%.3f", coord.getX()));
                    secondCompField.setText(String.format("%.3f", coord.getY()));  
                    break;
                    
                case REMOVE:
                    mapEuc.removeCoord((WaypointEuc) waypoint);       
                    updateTable(currentCircuitEuc);
            }
        });
        
        mapGeo.addWaypointSelectionListener(waypoint -> {
            switch (actionMode) {
                case SELECT:
                    CoordGeo coord = (CoordGeo) waypoint.getCoord();
                    idValueField.setText(String.valueOf(coord.getId()));
                    firstCompField.setText(String.format("%.3f", coord.getDecimalLatitude()));
                    secondCompField.setText(String.format("%.3f", coord.getDecimalLongitude()));
                    break;
                    
                case REMOVE:
                    mapGeo.removeCoord((WaypointGeo) waypoint);     
                    updateTable(currentCircuitGeo);
            }
        });
        
        mapEuc.addMapClickedListener(e -> {
            if (SwingUtilities.isLeftMouseButton(e) && actionMode == actionMode.ADD) {
                mapEuc.addCoord(e);
                updateTable(currentCircuitEuc);
            }
        });
        
        mapGeo.addMapClickedListener(e -> {
            if (SwingUtilities.isLeftMouseButton(e) &&actionMode == actionMode.ADD) {
                mapGeo.addCoord(e);
                updateTable(currentCircuitGeo);
            }
        });
        
        actionMode = actionMode.SELECT;
    }
    
    enum ActionMode {
        SELECT,
        ADD,
        REMOVE
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPane = new javax.swing.JSplitPane();
        layeredPane = new javax.swing.JLayeredPane();
        zoomLabelPanel = new javax.swing.JPanel();
        scaleLabel = new java.awt.Label();
        toolBar = new javax.swing.JPanel();
        selectToolBt = new javax.swing.JButton();
        addToolBt = new javax.swing.JButton();
        removeToolBt = new javax.swing.JButton();
        mapEuc = new view.MapEuc();
        mapGeo = new view.MapGeo();
        sidePanel = new javax.swing.JSplitPane();
        tabbedPane = new javax.swing.JTabbedPane();
        algorithmPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        improveButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        randomButton = new javax.swing.JButton();
        resultPanel = new javax.swing.JPanel();
        toggleInsertionHightlightBt = new view.CircuitToggleButton();
        toggleGreedyHighlightBt = new view.CircuitToggleButton();
        toggleRandomHighlightBt = new view.CircuitToggleButton();
        distancePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        distanceTable = new javax.swing.JTable();
        detailsPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        firstCompLabel = new javax.swing.JLabel();
        secondCompLabel = new javax.swing.JLabel();
        firstCompField = new javax.swing.JTextField();
        secondCompField = new javax.swing.JTextField();
        idValueField = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        closeFileMenuItem = new javax.swing.JMenuItem();
        saveFileItem = new javax.swing.JMenuItem();
        saveAsFileItem = new javax.swing.JMenuItem();
        exportResultFileItem = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        resetMenuItem = new javax.swing.JMenuItem();
        displayDistanceItem = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fête des Lumières");
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setPreferredSize(new java.awt.Dimension(1150, 800));
        setSize(new java.awt.Dimension(1150, 700));

        mainPane.setDividerLocation(700);
        mainPane.setResizeWeight(0.7);
        mainPane.setPreferredSize(new java.awt.Dimension(1150, 700));

        layeredPane.setBackground(new java.awt.Color(204, 204, 204));
        layeredPane.setMinimumSize(new java.awt.Dimension(400, 400));
        layeredPane.setOpaque(true);
        layeredPane.setPreferredSize(new java.awt.Dimension(700, 675));

        zoomLabelPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        zoomLabelPanel.setAlignmentX(0.0F);
        zoomLabelPanel.setAlignmentY(0.0F);
        zoomLabelPanel.setMaximumSize(new java.awt.Dimension(90, 30));

        scaleLabel.setAlignment(java.awt.Label.CENTER);
        scaleLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        scaleLabel.setText("x 1.0");

        javax.swing.GroupLayout zoomLabelPanelLayout = new javax.swing.GroupLayout(zoomLabelPanel);
        zoomLabelPanel.setLayout(zoomLabelPanelLayout);
        zoomLabelPanelLayout.setHorizontalGroup(
            zoomLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoomLabelPanelLayout.createSequentialGroup()
                .addComponent(scaleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        zoomLabelPanelLayout.setVerticalGroup(
            zoomLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scaleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        );

        scaleLabel.getAccessibleContext().setAccessibleParent(layeredPane);

        toolBar.setAlignmentX(0.0F);
        toolBar.setAlignmentY(0.0F);
        toolBar.setAutoscrolls(true);
        toolBar.setMaximumSize(new java.awt.Dimension(200, 30));

        selectToolBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_tool.png"))); // NOI18N
        selectToolBt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        selectToolBt.setMaximumSize(new java.awt.Dimension(50, 50));
        selectToolBt.setMinimumSize(new java.awt.Dimension(10, 10));
        selectToolBt.setPreferredSize(new java.awt.Dimension(40, 35));
        selectToolBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectToolBtActionPerformed(evt);
            }
        });
        toolBar.add(selectToolBt);

        addToolBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/add_tool.png"))); // NOI18N
        addToolBt.setToolTipText("");
        addToolBt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        addToolBt.setMaximumSize(new java.awt.Dimension(50, 50));
        addToolBt.setMinimumSize(new java.awt.Dimension(10, 10));
        addToolBt.setPreferredSize(new java.awt.Dimension(40, 35));
        addToolBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToolBtActionPerformed(evt);
            }
        });
        toolBar.add(addToolBt);

        removeToolBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_tool.png"))); // NOI18N
        removeToolBt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        removeToolBt.setMaximumSize(new java.awt.Dimension(50, 50));
        removeToolBt.setMinimumSize(new java.awt.Dimension(10, 10));
        removeToolBt.setPreferredSize(new java.awt.Dimension(40, 35));
        removeToolBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToolBtActionPerformed(evt);
            }
        });
        toolBar.add(removeToolBt);

        mapEuc.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                mapEucMouseWheelMoved(evt);
            }
        });

        mapGeo.setOpaque(true);
        mapGeo.setPreferredSize(new java.awt.Dimension(700, 700));
        mapGeo.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                mapGeoMouseWheelMoved(evt);
            }
        });

        layeredPane.setLayer(zoomLabelPanel, javax.swing.JLayeredPane.POPUP_LAYER);
        layeredPane.setLayer(toolBar, javax.swing.JLayeredPane.POPUP_LAYER);
        layeredPane.setLayer(mapEuc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredPane.setLayer(mapGeo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredPaneLayout = new javax.swing.GroupLayout(layeredPane);
        layeredPane.setLayout(layeredPaneLayout);
        layeredPaneLayout.setHorizontalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredPaneLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(zoomLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(mapGeo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layeredPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mapEuc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE))
        );
        layeredPaneLayout.setVerticalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(zoomLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(mapGeo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layeredPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(715, Short.MAX_VALUE)))
            .addGroup(layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mapEuc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE))
        );

        mainPane.setLeftComponent(layeredPane);

        sidePanel.setDividerLocation(500);
        sidePanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        sidePanel.setResizeWeight(0.6);
        sidePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sidePanel.setPreferredSize(new java.awt.Dimension(300, 700));

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        improveButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        improveButton.setText("Améliorer mon Trajet");
        improveButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        improveButton.setContentAreaFilled(false);
        improveButton.setOpaque(true);
        improveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                improveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        buttonsPanel.add(improveButton, gridBagConstraints);

        findButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        findButton.setText("Recherche d'itinéraire");
        findButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        findButton.setContentAreaFilled(false);
        findButton.setOpaque(true);
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        buttonsPanel.add(findButton, gridBagConstraints);

        randomButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        randomButton.setText("Points Aléatoires");
        randomButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        randomButton.setContentAreaFilled(false);
        randomButton.setOpaque(true);
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        buttonsPanel.add(randomButton, gridBagConstraints);

        resultPanel.setLayout(new java.awt.GridBagLayout());

        toggleInsertionHightlightBt.setText("Avec algorithme par insertion");
        toggleInsertionHightlightBt.setTitleText("Itinéraire 2");
        toggleInsertionHightlightBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleInsertionHightlightBtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        resultPanel.add(toggleInsertionHightlightBt, gridBagConstraints);

        toggleGreedyHighlightBt.setText("Avec algorithme glouton");
        toggleGreedyHighlightBt.setTitleText("Itinéraire 1");
        toggleGreedyHighlightBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleGreedyHighlightBtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        resultPanel.add(toggleGreedyHighlightBt, gridBagConstraints);

        toggleRandomHighlightBt.setText("Avec algorithme aléatoire");
        toggleRandomHighlightBt.setTitleText("Itinéraire 3");
        toggleRandomHighlightBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleRandomHighlightBtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        resultPanel.add(toggleRandomHighlightBt, gridBagConstraints);

        javax.swing.GroupLayout algorithmPanelLayout = new javax.swing.GroupLayout(algorithmPanel);
        algorithmPanel.setLayout(algorithmPanelLayout);
        algorithmPanelLayout.setHorizontalGroup(
            algorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, algorithmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(algorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
                .addContainerGap())
        );
        algorithmPanelLayout.setVerticalGroup(
            algorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Itinéraires", algorithmPanel);

        distancePanel.setBackground(new java.awt.Color(204, 204, 204));

        tableScrollPane.setBackground(new java.awt.Color(204, 204, 204));
        tableScrollPane.setOpaque(false);

        distanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableScrollPane.setViewportView(distanceTable);

        javax.swing.GroupLayout distancePanelLayout = new javax.swing.GroupLayout(distancePanel);
        distancePanel.setLayout(distancePanelLayout);
        distancePanelLayout.setHorizontalGroup(
            distancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
        );
        distancePanelLayout.setVerticalGroup(
            distancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Tableau des distances", distancePanel);

        sidePanel.setTopComponent(tabbedPane);
        tabbedPane.getAccessibleContext().setAccessibleName("tabbedPane");

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Détails du lieu"));
        detailsPanel.setName("Détails"); // NOI18N
        detailsPanel.setLayout(new java.awt.GridBagLayout());

        idLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        idLabel.setText("ID :");
        idLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        detailsPanel.add(idLabel, gridBagConstraints);

        firstCompLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        firstCompLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        firstCompLabel.setText("X :");
        firstCompLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        detailsPanel.add(firstCompLabel, gridBagConstraints);

        secondCompLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        secondCompLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        secondCompLabel.setText("Y :");
        secondCompLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        detailsPanel.add(secondCompLabel, gridBagConstraints);

        firstCompField.setEditable(false);
        firstCompField.setColumns(6);
        firstCompField.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        firstCompField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        firstCompField.setText("0");
        firstCompField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        firstCompField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstCompFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        detailsPanel.add(firstCompField, gridBagConstraints);

        secondCompField.setEditable(false);
        secondCompField.setColumns(6);
        secondCompField.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        secondCompField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        secondCompField.setText("0");
        secondCompField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        detailsPanel.add(secondCompField, gridBagConstraints);

        idValueField.setEditable(false);
        idValueField.setColumns(6);
        idValueField.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        idValueField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        idValueField.setText("0");
        idValueField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        detailsPanel.add(idValueField, gridBagConstraints);

        sidePanel.setRightComponent(detailsPanel);

        mainPane.setRightComponent(sidePanel);

        menuBar.setPreferredSize(new java.awt.Dimension(118, 25));

        fileMenu.setText("Fichier");

        openFileMenuItem.setText("Ouvrir une carte");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);

        closeFileMenuItem.setText("Fermer la carte");
        closeFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeFileMenuItem);

        saveFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveFileItem.setText("Enregistrer");
        saveFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFileItem);

        saveAsFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAsFileItem.setText("Enregistrer sous");
        saveAsFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsFileItem);

        exportResultFileItem.setText("Exporter fichier résultat");
        exportResultFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportResultFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportResultFileItem);

        menuBar.add(fileMenu);

        windowMenu.setText("Affichage");

        resetMenuItem.setText("Réinitialiser");
        resetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(resetMenuItem);

        displayDistanceItem.setSelected(true);
        displayDistanceItem.setText("Afficher les distances");
        displayDistanceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayDistanceItemActionPerformed(evt);
            }
        });
        windowMenu.add(displayDistanceItem);

        menuBar.add(windowMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        JFileChooser selectionWindow = new JFileChooser();
        selectionWindow.showOpenDialog(this);

        if (selectionWindow.getSelectedFile() != null) {
            String path = selectionWindow.getSelectedFile().getAbsolutePath();
            String type = Circuit.getFileType(path);
            closeCurrentMap();

            int coordsCount;
            String[] columnsNames;

            switch (type) {
                case "EUC_2D":
                    currentCircuitEuc = new CircuitEuc();
                    currentCircuitEuc.loadFile(selectionWindow.getSelectedFile());
                    mapEuc.load(currentCircuitEuc);
                    SwingUtilities.invokeLater(() -> {
                        if (mapGeo != null)
                            if (mapGeo.isVisible()) {
                                mapGeo.setVisible(false);
                            }
                        
                        mapEuc.setVisible(true);
                        mainPane.repaint();
                    });

                    updateTable(currentCircuitEuc);
                    
                    // Modification du panneau des détails
                    firstCompLabel.setText("X :");
                    secondCompLabel.setText("Y :");
                    
                    break;

                case "GEO":
                    currentCircuitGeo = new CircuitGeo();
                    currentCircuitGeo.loadFile(selectionWindow.getSelectedFile());
                    mapGeo.load(currentCircuitGeo);
                    SwingUtilities.invokeLater(() -> {
                        if (mapEuc != null)
                            if (mapEuc.isVisible()) {
                                mapEuc.setVisible(false);
                            }
                        
                        mapGeo.setVisible(true);
                        mainPane.repaint();
                    });
                    
                    updateTable(currentCircuitGeo);
                    
                    // Modification du panneau des détails
                    firstCompLabel.setText("Latitude :");
                    secondCompLabel.setText("Longitude :");
                    
                    break;
                    
                default: JOptionPane.showMessageDialog(this, "Le type de fichier n'est pas pris en charge", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void closeFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFileMenuItemActionPerformed
        closeCurrentMap();
    }//GEN-LAST:event_closeFileMenuItemActionPerformed

    private void resetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetMenuItemActionPerformed
        mainPane.resetToPreferredSizes();
        sidePanel.resetToPreferredSizes();
    }//GEN-LAST:event_resetMenuItemActionPerformed

    private void mapGeoMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_mapGeoMouseWheelMoved
        scaleLabel.setText("x " + String.format("%.1f", mapGeo.getScale()));
    }//GEN-LAST:event_mapGeoMouseWheelMoved

    private void firstCompFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstCompFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstCompFieldActionPerformed

    private void selectToolBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectToolBtActionPerformed
        actionMode = ActionMode.SELECT;
    }//GEN-LAST:event_selectToolBtActionPerformed

    private void addToolBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToolBtActionPerformed
        actionMode = ActionMode.ADD;
    }//GEN-LAST:event_addToolBtActionPerformed

    private void removeToolBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToolBtActionPerformed
        actionMode = ActionMode.REMOVE;
    }//GEN-LAST:event_removeToolBtActionPerformed

    private void displayDistanceItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayDistanceItemActionPerformed
        Constants.DISPLAY_DISTANCE = !Constants.DISPLAY_DISTANCE;
        mainPane.repaint();
    }//GEN-LAST:event_displayDistanceItemActionPerformed

    private void exportResultFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportResultFileItemActionPerformed
        JFileChooser inputChooser = new JFileChooser();
        inputChooser.setMultiSelectionEnabled(true);
        int result = inputChooser.showOpenDialog(this);
        File[] files = inputChooser.getSelectedFiles();
        
        if (result == JFileChooser.APPROVE_OPTION) {
            JFileChooser outputChooser = new JFileChooser();
            outputChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            outputChooser.setMultiSelectionEnabled(false);
            outputChooser.showOpenDialog(this);

            if (outputChooser.getSelectedFile() != null) {
                String outputFilePath = outputChooser.getSelectedFile().getAbsolutePath();
                Circuit.exportResultFile(files, outputFilePath);
                JOptionPane.showMessageDialog(this, "Le fichier de résultat a été exporté", "Fichier résultat", JOptionPane.PLAIN_MESSAGE);
            }
        }
    }//GEN-LAST:event_exportResultFileItemActionPerformed

    private void saveFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileItemActionPerformed
        boolean success = false;
        
        if (mapEuc.displayed()) success = currentCircuitEuc.saveFile();
        else if (mapGeo.displayed()) success = currentCircuitGeo.saveFile();

        if (success) 
            JOptionPane.showMessageDialog(this, "Le fichier a bien été sauvegardé", "Fichier sauvegardé", JOptionPane.PLAIN_MESSAGE);
        else {
            if (!mapGeo.displayed() && !mapEuc.displayed())
                JOptionPane.showMessageDialog(this, "Aucun fichier ouvert à sauvegarder", "Erreur", JOptionPane.ERROR_MESSAGE);
            else
                JOptionPane.showMessageDialog(this, "Erreur lors de la sauvegarde", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveFileItemActionPerformed

    private void saveAsFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsFileItemActionPerformed
        if (mapEuc.displayed() || mapGeo.displayed()) {            
            JFileChooser chooser = new JFileChooser();
            int result = chooser.showSaveDialog(this);
            
            if (result == JFileChooser.APPROVE_OPTION) {
                boolean success = false;
                
                File selectedFile = chooser.getSelectedFile();
                
                if (mapEuc.displayed()) success = currentCircuitEuc.saveFileAs(selectedFile);
                else success = currentCircuitGeo.saveFileAs(selectedFile);

                if (success) 
                    JOptionPane.showMessageDialog(this, "Le fichier a bien été sauvegardé", "Fichier sauvegardé", JOptionPane.PLAIN_MESSAGE);
                else {
                    JOptionPane.showMessageDialog(this, "Erreur lors de la sauvegarde", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        } else {
            JOptionPane.showMessageDialog(this, "Aucun fichier ouvert à sauvegarder", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveAsFileItemActionPerformed

    private void toggleRandomHighlightBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleRandomHighlightBtActionPerformed
        if (mapEuc.displayed()) {
            mapEuc.highlightRandomCircuit(!mapEuc.randomCircuitHighlighted());
        }

        if (mapGeo.displayed()) {
            mapGeo.swapHighlightRandomCircuit();
        }
    }//GEN-LAST:event_toggleRandomHighlightBtActionPerformed

    private void toggleGreedyHighlightBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleGreedyHighlightBtActionPerformed
        if (mapEuc.displayed()) {
            mapEuc.highlightGreedyCircuit(!mapEuc.greedyCircuitHighlighted());
        }

        if (mapGeo.displayed()) {
            mapGeo.swapHighlightGreedyCircuit();
        }
    }//GEN-LAST:event_toggleGreedyHighlightBtActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        if (!mapEuc.displayed() && !mapGeo.displayed()) {
            JOptionPane.showMessageDialog(mainPane, "Aucun fichier n'a été ouvert", "Erreur d'ouverture", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String message = "Entrez le nombre de lieux que vous voulez générer !" ;
        String reponseStr = JOptionPane.showInputDialog(mainPane, message, "Génération", JOptionPane.PLAIN_MESSAGE);
        int reponse;

        if (reponseStr != null) { // Vérifie si l'utilisateur n'a pas annulé
            try {
                reponse = Integer.parseInt(reponseStr); // Convertit la chaîne en entier
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(mainPane, "Veuillez entrer un nombre valide.", "Erreur", JOptionPane.WARNING_MESSAGE);
                return; // Ou une autre gestion d'erreur
            }
        } else {
            return; // Annulé par l'utilisateur
        }
        Random random = new Random();

        for (int i = 1; i <= reponse; i++) {
            double x = 10 + (200 - 10) * random.nextDouble();
            double y = 10 + (200 - 10) * random.nextDouble();
            
            if (mapEuc.displayed()) {
                mapEuc.addCoord(x, y);
                updateTable(currentCircuitEuc);
            }
            else if (mapGeo.displayed()) {
                mapGeo.addCoord(x, y);
                updateTable(currentCircuitGeo);
            }
        }
    }//GEN-LAST:event_randomButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        if (!mapEuc.displayed() && !mapGeo.displayed()) {
            JOptionPane.showMessageDialog(mainPane, "Aucun fichier n'a été ouvert", "Erreur d'ouverture", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (mapEuc.displayed()) {
            currentCircuitEuc.calculateBestGreedyCircuit();
            currentCircuitEuc.calculateBestInsertionCircuit();
            currentCircuitEuc.calculateRandomCircuit();
            
            toggleGreedyHighlightBt.setSubtitleText("Distance : " + String.format("%.2f", currentCircuitEuc.calculateCircuitLength(currentCircuitEuc.getGreedyCircuit())) + " km");
            toggleInsertionHightlightBt.setSubtitleText("Distance : " + String.format("%.2f", currentCircuitEuc.calculateCircuitLength(currentCircuitEuc.getInsertionCircuit())) + " km");
            toggleRandomHighlightBt.setSubtitleText("Distance : " + String.format("%.2f", currentCircuitEuc.calculateCircuitLength(currentCircuitEuc.getRandomCircuit())) + " km");
            
            mapEuc.repaint();
        }
        
        else if (mapGeo.displayed()) {
            currentCircuitGeo.calculateBestGreedyCircuit();
            currentCircuitGeo.calculateBestInsertionCircuit();
            currentCircuitGeo.calculateRandomCircuit();
            
            toggleGreedyHighlightBt.setSubtitleText("Distance : " + currentCircuitGeo.calculateCircuitLength(currentCircuitGeo.getGreedyCircuit()) + " km");
            toggleInsertionHightlightBt.setSubtitleText("Distance : " + currentCircuitGeo.calculateCircuitLength(currentCircuitGeo.getInsertionCircuit()) + " km");
            toggleRandomHighlightBt.setSubtitleText("Distance : " + currentCircuitGeo.calculateCircuitLength(currentCircuitGeo.getRandomCircuit()) + " km");

            mapGeo.repaint();
        }
    }//GEN-LAST:event_findButtonActionPerformed

    private void improveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_improveButtonActionPerformed
        if (mapEuc.displayed()) {
            Object[] options = {"Itinéraire 1", "Itinéraire 2", "Itinéraire 3"};
            int choix = JOptionPane.showOptionDialog(mainPane, "Choisir l'algorithme à améliorer", "Amélioration", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            
            List<CoordEuc> circuit;
            
            switch (choix) {
                case 0:
                    // L'utilisateur a cliqué sur "Glouton"
                    currentCircuitEuc.calculateBestGreedyCircuit();
                    circuit = currentCircuitEuc.getGreedyCircuit() ;      
                    currentCircuitEuc.improveCircuitBySwapping(circuit, "GREEDY");
                    
                    toggleGreedyHighlightBt.setSubtitleText("Distance : " + String.format("%.2f", currentCircuitEuc.calculateCircuitLength(currentCircuitEuc.getGreedyCircuit())) + " km");
                    
                    mapEuc.repaint();
                    
                    break;

                case 1:
                    // L'utilisateur a cliqué sur "Insertion"
                    currentCircuitEuc.calculateBestInsertionCircuit();
                    circuit = currentCircuitEuc.getInsertionCircuit() ;
                    currentCircuitEuc.improveCircuitBySwapping(circuit, "INSERTION");

                    toggleInsertionHightlightBt.setSubtitleText("Distance : " + String.format("%.2f", currentCircuitEuc.calculateCircuitLength(currentCircuitEuc.getInsertionCircuit())) + " km");
                    
                    mapEuc.repaint();
                    
                    break;
                    
                case 2:
                    // L'utilisateur a cliqué sur "Aléatoire"
                    currentCircuitEuc.calculateRandomCircuit();
                    circuit = currentCircuitEuc.getRandomCircuit() ;
                    currentCircuitEuc.improveCircuitBySwapping(circuit, " RANDOM");
                    
                    toggleRandomHighlightBt.setSubtitleText("Distance : " + currentCircuitEuc.calculateCircuitLength(currentCircuitEuc.getRandomCircuit()) + " km");
                    
                    mapEuc.repaint();
                    
                    break;
                    
                default:
                    // Fenêtre fermée ou aucune sélection
                    System.out.println("Aucun algorithme sélectionné");
                break;
            }
        }

        else if (mapGeo.displayed()) {
            Object[] options = {"Glouton", "Insertion", "Aléatoire"};
            int choix = JOptionPane.showOptionDialog(mainPane, "Choisissez l'algorithme a améliorer", "amélioration", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            
            List<CoordGeo> circuit;
            
            switch (choix) {
                case 0:
                    // L'utilisateur a cliqué sur "Glouton"
                    currentCircuitGeo.calculateBestGreedyCircuit();
                    circuit = currentCircuitGeo.getGreedyCircuit() ;
                    currentCircuitGeo.improveCircuitBySwapping(circuit, "GREEDY");
                    
                    toggleGreedyHighlightBt.setSubtitleText("Distance : " + currentCircuitGeo.calculateCircuitLength(currentCircuitGeo.getGreedyCircuit()) + " km");
            
                    mapGeo.repaint();
                    
                    break;

                case 1:
                    // L'utilisateur a cliqué sur "Insertion"
                    currentCircuitGeo.calculateBestInsertionCircuit();
                    circuit = currentCircuitGeo.getInsertionCircuit() ;
                    currentCircuitGeo.improveCircuitBySwapping(circuit, "INSERTION");

                    toggleInsertionHightlightBt.setSubtitleText("Distance : " + currentCircuitGeo.calculateCircuitLength(currentCircuitGeo.getInsertionCircuit()) + " km");
                    
                    mapGeo.repaint();
                    
                    break;
                    
                case 2:
                    // L'utilisateur a cliqué sur "Aléatoire"
                    currentCircuitGeo.calculateRandomCircuit();
                    circuit = currentCircuitGeo.getRandomCircuit() ;
                    currentCircuitGeo.improveCircuitBySwapping(circuit, " RANDOM");
                    
                    toggleRandomHighlightBt.setSubtitleText("Distance : " + currentCircuitGeo.calculateCircuitLength(currentCircuitGeo.getRandomCircuit()) + " km");
                    
                    mapGeo.repaint();
                    
                    break;
                    
                default:
                    // Fenêtre fermée ou aucune sélection
                    System.out.println("Aucun algorithme sélectionné");
                break;
            }
        }
        
        else {
            JOptionPane.showMessageDialog(mainPane, "Aucun fichier n'a été ouvert", "Erreur d'ouverture", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_improveButtonActionPerformed

    private void toggleInsertionHightlightBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleInsertionHightlightBtActionPerformed
        if (mapEuc.displayed()) {
            mapEuc.highlightInsertionCircuit(!mapEuc.insertionCircuitHighlighted());
        }

        if (mapGeo.displayed()) {
            mapGeo.swapHighlightInsertionCircuit();
        }
    }//GEN-LAST:event_toggleInsertionHightlightBtActionPerformed

    private void mapEucMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_mapEucMouseWheelMoved
        scaleLabel.setText("x " + String.format("%.1f", mapEuc.getScale()));
    }//GEN-LAST:event_mapEucMouseWheelMoved
    
    private void updateTable(Circuit currentCircuit) {        
        // Modification du model (distanceTable)
        int coordsCount = currentCircuit.getCoords().size();
        
        // Création des noms de colonnes
        String[] columnsNames = new String[coordsCount + 1];
        columnsNames[0] = ""; // coin vide
        for (int i = 0; i < coordsCount; i++) {
            columnsNames[i + 1] = "Lieu " + (i + 1);
        }

        tableModel.setDataVector(currentCircuit.createDistanceMatrix(), columnsNames);
    }
    
    public void closeCurrentMap() {
        if (mapGeo.displayed()) {
            mapGeo.close();
        }

        if (mapEuc.displayed()) {
            mapEuc.close();
        }
        
        toggleGreedyHighlightBt.setSubtitleText("Distance : 0 km");
        toggleInsertionHightlightBt.setSubtitleText("Distance : 0 km");
        toggleRandomHighlightBt.setSubtitleText("Distance : 0 km");
        
        tableModel.setColumnCount(0);
        tableModel.setRowCount(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }
    
    private CircuitEuc currentCircuitEuc;
    private CircuitGeo currentCircuitGeo;
    private DefaultTableModel tableModel ;
    private ActionMode actionMode;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToolBt;
    private javax.swing.JPanel algorithmPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JMenuItem closeFileMenuItem;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JRadioButtonMenuItem displayDistanceItem;
    private javax.swing.JPanel distancePanel;
    private javax.swing.JTable distanceTable;
    private javax.swing.JMenuItem exportResultFileItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField firstCompField;
    private javax.swing.JLabel firstCompLabel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idValueField;
    private javax.swing.JButton improveButton;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JSplitPane mainPane;
    private view.MapEuc mapEuc;
    private view.MapGeo mapGeo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JButton randomButton;
    private javax.swing.JButton removeToolBt;
    private javax.swing.JMenuItem resetMenuItem;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JMenuItem saveAsFileItem;
    private javax.swing.JMenuItem saveFileItem;
    private java.awt.Label scaleLabel;
    private javax.swing.JTextField secondCompField;
    private javax.swing.JLabel secondCompLabel;
    private javax.swing.JButton selectToolBt;
    private javax.swing.JSplitPane sidePanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JScrollPane tableScrollPane;
    private view.CircuitToggleButton toggleGreedyHighlightBt;
    private view.CircuitToggleButton toggleInsertionHightlightBt;
    private view.CircuitToggleButton toggleRandomHighlightBt;
    private javax.swing.JPanel toolBar;
    private javax.swing.JMenu windowMenu;
    private javax.swing.JPanel zoomLabelPanel;
    // End of variables declaration//GEN-END:variables
}
